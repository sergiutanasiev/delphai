[{"D:\\js\\delphai\\src\\index.tsx":"1","D:\\js\\delphai\\src\\reportWebVitals.ts":"2","D:\\js\\delphai\\src\\App.tsx":"3","D:\\js\\delphai\\src\\component\\index.ts":"4","D:\\js\\delphai\\src\\component\\Search.tsx":"5","D:\\js\\delphai\\src\\component\\SearchTerm.tsx":"6","D:\\js\\delphai\\src\\store.ts":"7","D:\\js\\delphai\\src\\reducers\\searchReducer.ts":"8","D:\\js\\delphai\\src\\actions\\searchAction.ts":"9","D:\\js\\delphai\\src\\component\\CompanyCollection.tsx":"10"},{"size":614,"mtime":1611950730320,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":339,"mtime":1611951059796,"results":"14","hashOfConfig":"12"},{"size":195,"mtime":1611951073624,"results":"15","hashOfConfig":"12"},{"size":3633,"mtime":1611950881431,"results":"16","hashOfConfig":"12"},{"size":411,"mtime":1611949853457,"results":"17","hashOfConfig":"12"},{"size":177,"mtime":1611950707923,"results":"18","hashOfConfig":"12"},{"size":536,"mtime":1611950676274,"results":"19","hashOfConfig":"12"},{"size":255,"mtime":1611950674325,"results":"20","hashOfConfig":"12"},{"size":1340,"mtime":1611951028754,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1tfcrfu",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\js\\delphai\\src\\index.tsx",[],["44","45"],"D:\\js\\delphai\\src\\reportWebVitals.ts",[],"D:\\js\\delphai\\src\\App.tsx",["46"],"D:\\js\\delphai\\src\\component\\index.ts",[],"D:\\js\\delphai\\src\\component\\Search.tsx",["47","48"],"import React, {useEffect} from 'react'\r\nimport {SearchTerm} from './index'\r\nimport _ from 'lodash'\r\nimport * as data from '../api/company_collection.json'\r\nimport { useDispatch } from 'react-redux'\r\nimport {setMatchedCollection} from '../actions/searchAction'\r\n\r\ntype Props = {}\r\n\r\n// A list of error messages\r\nenum ErroMessages {\r\n    Empty = '',\r\n    NoMatch = 'No macthed results',\r\n    Short = 'Searched therm must be longer than 3 characters'\r\n}\r\n\r\nexport const Search:React.FC<Props> = ({}:Props) => {\r\n    const [searchTerm, setSearchTerm] = React.useState('')\r\n    const [errorLog, setSerror] = React.useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSearchTermChange = (searchTerm: string) => {\r\n        setSearchTerm(searchTerm)\r\n        if (searchTerm.length > 3) {\r\n            delayQuery(searchTerm)\r\n        }\r\n    }\r\n\r\n    const delayQuery = _.debounce(searchTerm => getMatchingCompany(searchTerm), 750)\r\n\r\n    const getMatchingCompany = async(searchTerm: string) => {\r\n        await fetchDataPromise(searchTerm)\r\n        .then(response => {\r\n            handleMatchCollection(response)\r\n        }).catch((error) => {\r\n            handleMatchCollection([])\r\n            setSerror(error)\r\n        })\r\n    }\r\n\r\n    const fetchDataPromise = (searchTerm: string):Promise<any> => {\r\n        // Make a local copy\r\n        let fakeApiData:any = Object.assign({}, Object.values(data)[0])\r\n        let results:Array<any> = []\r\n        // Run a promise and return macthed results\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                for (let i in fakeApiData) {\r\n                    if (fakeApiData[i].name.toLowerCase().includes(searchTerm)) {\r\n                        results.push(fakeApiData[i])\r\n                    }\r\n                }\r\n                if (results.length !== 0) {\r\n                    resolve(results)\r\n                } else {\r\n                    // Error message to output\r\n                    reject(ErroMessages.NoMatch)\r\n                }\r\n            }, 500)\r\n        })\r\n    }\r\n\r\n    const handleMatchCollection = (collection: Array<any>) => {\r\n        dispatch(setMatchedCollection(collection))\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Case search term has 0 characters and an error is present\r\n        // Remove the error message since the user is not currenly looking for anything\r\n        if (searchTerm.length === 0 && errorLog.length !== 0) {\r\n            // Empty the collection of companies\r\n            setSerror(ErroMessages.Empty)\r\n        }\r\n        // Case search term is bigger than 3 but and error message is already present\r\n        // And its not the case of No match error\r\n        if (searchTerm.length > 3 && \r\n            (errorLog !== ErroMessages.NoMatch && errorLog.length !== 0)) {\r\n                setSerror(ErroMessages.Empty)\r\n        }\r\n        // Set new error message\r\n        // Case search term is shorter than 4 characters but bigger than 0 (search input has at least one character)\r\n        if ((searchTerm.length <= 3 && searchTerm.length > 0) &&\r\n            errorLog.length === 0) {\r\n                handleMatchCollection([])\r\n                setSerror(ErroMessages.Short)\r\n        }\r\n        // Reset collection\r\n        if (searchTerm.length === 0 && errorLog.length === 0) {\r\n            handleMatchCollection([])\r\n        }\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            <SearchTerm searchTerm={searchTerm}\r\n            onSearchTermChange={onSearchTermChange} />\r\n            <p className={`error-log ${errorLog.length === 0 ? 'hide' : 'show'}`}>{errorLog}</p>\r\n        </div>\r\n    )\r\n}","D:\\js\\delphai\\src\\component\\SearchTerm.tsx",[],"D:\\js\\delphai\\src\\store.ts",[],"D:\\js\\delphai\\src\\reducers\\searchReducer.ts",[],"D:\\js\\delphai\\src\\actions\\searchAction.ts",[],"D:\\js\\delphai\\src\\component\\CompanyCollection.tsx",["49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":12},{"ruleId":"58","severity":1,"message":"59","line":17,"column":40,"nodeType":"60","messageId":"61","endLine":17,"endColumn":48},{"ruleId":"62","severity":1,"message":"63","line":68,"column":5,"nodeType":"56","endLine":68,"endColumn":14,"suggestions":"64"},{"ruleId":"54","severity":1,"message":"65","line":11,"column":11,"nodeType":"56","messageId":"57","endLine":11,"endColumn":19},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setSerror'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [searchTerm.length, errorLog, handleMatchCollection] as a second argument to the useEffect Hook.",["68"],"'dispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Add dependencies array: [searchTerm.length, errorLog, handleMatchCollection]",{"range":"71","text":"72"},[3373,3373],", [searchTerm.length, errorLog, handleMatchCollection]"]